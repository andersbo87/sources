<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classpsql" kind="class" language="C++" prot="public">
    <compoundname>psql</compoundname>
    <includes refid="psql_8h" local="no">psql.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpsql_1aaa952fad98ba9bd5be5648b6117a65f1" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString psql::errMsg</definition>
        <argsstring></argsstring>
        <name>errMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="142" column="1" bodyfile="psql.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsql_1a9cfa6f47616cc1162009459477880df9" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString psql::username</definition>
        <argsstring></argsstring>
        <name>username</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="142" column="1" bodyfile="psql.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsql_1ab6ba33b32955d9343406b4ac327f673d" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString psql::host</definition>
        <argsstring></argsstring>
        <name>host</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="142" column="1" bodyfile="psql.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsql_1a735c3b7e0782f90495a6a27e080ed293" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString psql::password</definition>
        <argsstring></argsstring>
        <name>password</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="142" column="1" bodyfile="psql.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsql_1a164c18771a65b0ae842d59e4c440a994" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString psql::winTitle</definition>
        <argsstring></argsstring>
        <name>winTitle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="142" column="1" bodyfile="psql.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpsql_1a84d762f07116e20fd58793b6b0327199" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string psql::connectionString</definition>
        <argsstring></argsstring>
        <name>connectionString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="143" column="1" bodyfile="psql.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpsql_1aaff5fe0931dce097850982e44e6361af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>psql::psql</definition>
        <argsstring>(QString windowTitle)</argsstring>
        <name>psql</name>
        <param>
          <type>QString</type>
          <declname>windowTitle</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1aaff5fe0931dce097850982e44e6361af" kindref="member">psql::psql</ref> Class constructor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>windowTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The title of the window to be used in message boxes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="44" column="1" bodyfile="psql.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aecc9fd93dc5ca0c4f4a63d445a36d166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getUsername</definition>
        <argsstring>()</argsstring>
        <name>getUsername</name>
        <briefdescription>
<para><ref refid="classpsql_1aecc9fd93dc5ca0c4f4a63d445a36d166" kindref="member">psql::getUsername</ref>: Gets the username </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the username </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="45" column="1" bodyfile="psql.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a817e5a88f877cac6f843c1e743aec096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getPassword</definition>
        <argsstring>()</argsstring>
        <name>getPassword</name>
        <briefdescription>
<para><ref refid="classpsql_1a817e5a88f877cac6f843c1e743aec096" kindref="member">psql::getPassword</ref>: Gets the user password </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The user&apos;s password </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="46" column="1" bodyfile="psql.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a95d06ee661db0b9cf72605b983b04613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getHost</definition>
        <argsstring>()</argsstring>
        <name>getHost</name>
        <briefdescription>
<para><ref refid="classpsql_1a95d06ee661db0b9cf72605b983b04613" kindref="member">psql::getHost</ref>: Gets the IP address of the host </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The host&apos;s IP address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="47" column="1" bodyfile="psql.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a96b3b9483f1a642c026d4b5cf505eb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void psql::setHost</definition>
        <argsstring>(QString newHost)</argsstring>
        <name>setHost</name>
        <param>
          <type>QString</type>
          <declname>newHost</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a96b3b9483f1a642c026d4b5cf505eb75" kindref="member">psql::setHost</ref>: Sets the IP address of the new host </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newHost</parametername>
</parameternamelist>
<parameterdescription>
<para>The new IP address </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="49" column="1" bodyfile="psql.cpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a6c29350037550b7e5a5bb8f439c405f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void psql::setPassword</definition>
        <argsstring>(QString newPassword)</argsstring>
        <name>setPassword</name>
        <param>
          <type>QString</type>
          <declname>newPassword</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a6c29350037550b7e5a5bb8f439c405f3" kindref="member">psql::setPassword</ref>: Sets the new password </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newPassword</parametername>
</parameternamelist>
<parameterdescription>
<para>The new password </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="50" column="1" bodyfile="psql.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a1488a9e4909abd172651b7be240342cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void psql::setUsername</definition>
        <argsstring>(QString newUser)</argsstring>
        <name>setUsername</name>
        <param>
          <type>QString</type>
          <declname>newUser</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a1488a9e4909abd172651b7be240342cb" kindref="member">psql::setUsername</ref>: Sets the new username </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newUser</parametername>
</parameternamelist>
<parameterdescription>
<para>The new username </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="51" column="1" bodyfile="psql.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ada485c933df77453629e3821ab19fa4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::connectDatabase</definition>
        <argsstring>()</argsstring>
        <name>connectDatabase</name>
        <briefdescription>
<para><ref refid="classpsql_1ada485c933df77453629e3821ab19fa4c" kindref="member">psql::connectDatabase</ref> Connects to the PostgreSQL database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on successful connection and false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="54" column="1" bodyfile="psql.cpp" bodystart="517" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a03f773904e698853caa0fcdb1f5b3809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::insertApplication</definition>
        <argsstring>(QString title, QString company, int cityID, int statusID, QString date, QString motivation)</argsstring>
        <name>insertApplication</name>
        <param>
          <type>QString</type>
          <declname>title</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>company</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cityID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusID</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>date</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a03f773904e698853caa0fcdb1f5b3809" kindref="member">psql::insertApplication</ref> Inserts a new job application to the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title of the new job. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>company</parametername>
</parameternamelist>
<parameterdescription>
<para>The employer company </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusID</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the new job. Can be (in Norwegian) 1 (registrert), 2 (sendt), 3 (interessert, mulig intervju), 4 (avvist) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the new job application </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>The reasons and motivation for applying for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on success and false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="57" column="1" bodyfile="psql.cpp" bodystart="127" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a767b85014d9df3eac148730f18888d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::insertCity</definition>
        <argsstring>(QString cityName, int countryID)</argsstring>
        <name>insertCity</name>
        <param>
          <type>QString</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>countryID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a767b85014d9df3eac148730f18888d6d" kindref="member">psql::insertCity</ref> Inserts a new city to the database </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the new city </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>countryID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the country in which the city is located </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the insertion is successful and false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="58" column="1" bodyfile="psql.cpp" bodystart="168" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ab3b5934ce3fbc4be1730d990d4142893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::insertCountry</definition>
        <argsstring>(QString countryName)</argsstring>
        <name>insertCountry</name>
        <param>
          <type>QString</type>
          <declname>countryName</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1ab3b5934ce3fbc4be1730d990d4142893" kindref="member">psql::insertCountry</ref> Inserts a new country into the database </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>countryName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the new country. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on success and false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="59" column="1" bodyfile="psql.cpp" bodystart="199" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a601ee0bdc9430b1d674a857f7c94b767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::insertStatus</definition>
        <argsstring>(QString statusName)</argsstring>
        <name>insertStatus</name>
        <param>
          <type>QString</type>
          <declname>statusName</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a601ee0bdc9430b1d674a857f7c94b767" kindref="member">psql::insertStatus</ref> Inserts a new status to the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statusName</parametername>
</parameternamelist>
<parameterdescription>
<para>The new status name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="60" column="1" bodyfile="psql.cpp" bodystart="228" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a836eea3c6deb2d6a3a357193a99d6ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::updateApplication</definition>
        <argsstring>(QString title, QString company, int cityID, int statusID, QString date, QString motivation, int id)</argsstring>
        <name>updateApplication</name>
        <param>
          <type>QString</type>
          <declname>title</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>company</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cityID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusID</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>date</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>motivation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a836eea3c6deb2d6a3a357193a99d6ee7" kindref="member">psql::updateApplication</ref>: Updates the current job application </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The new title </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>company</parametername>
</parameternamelist>
<parameterdescription>
<para>The new job company </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the new city where the job is located </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusID</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the new job </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The new job application deadline </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The job ID to be updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on success and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="63" column="1" bodyfile="psql.cpp" bodystart="267" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a6adf2ba381783e520c03fe5324dcb010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::updateCity</definition>
        <argsstring>(QString cityName, int countryID, int id)</argsstring>
        <name>updateCity</name>
        <param>
          <type>QString</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>countryID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a6adf2ba381783e520c03fe5324dcb010" kindref="member">psql::updateCity</ref> Updates information of an existing city. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The new name of the city </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>countryID</parametername>
</parameternamelist>
<parameterdescription>
<para>The new country ID, the ID of the country where the city is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the city to be updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="64" column="1" bodyfile="psql.cpp" bodystart="311" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ae662278c5fb8ff3471ee1442e69482e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::updateCountry</definition>
        <argsstring>(QString countryName, int countryID)</argsstring>
        <name>updateCountry</name>
        <param>
          <type>QString</type>
          <declname>countryName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>countryID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1ae662278c5fb8ff3471ee1442e69482e2" kindref="member">psql::updateCountry</ref> Updates an existing country. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>countryName</parametername>
</parameternamelist>
<parameterdescription>
<para>The new country name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>countryID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the country to be updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on success and false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="65" column="1" bodyfile="psql.cpp" bodystart="343" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a620364c99c98e20720908deb045536a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::updateStatus</definition>
        <argsstring>(QString statusname, int statusID)</argsstring>
        <name>updateStatus</name>
        <param>
          <type>QString</type>
          <declname>statusname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a620364c99c98e20720908deb045536a0" kindref="member">psql::updateStatus</ref> Updates an existing status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statusname</parametername>
</parameternamelist>
<parameterdescription>
<para>The new status name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statusID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the status to be updated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on success and false on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="66" column="1" bodyfile="psql.cpp" bodystart="373" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a999ee8e2d813892411ef502ebc055a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::deleteApplication</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>deleteApplication</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a999ee8e2d813892411ef502ebc055a79" kindref="member">psql::deleteApplication</ref> Removes an application from the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the application to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on successful removal and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="69" column="1" bodyfile="psql.cpp" bodystart="406" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aaffd42b26b635d9881daaf5fbf4fd62f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::deleteCity</definition>
        <argsstring>(int cityID)</argsstring>
        <name>deleteCity</name>
        <param>
          <type>int</type>
          <declname>cityID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1aaffd42b26b635d9881daaf5fbf4fd62f" kindref="member">psql::deleteCity</ref> Deletes an existing city from the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cityID</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identification number of the city to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on successful removal and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="70" column="1" bodyfile="psql.cpp" bodystart="434" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a914bf8701fbed4ff80edcd0d09c7c3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::deleteCountry</definition>
        <argsstring>(int countryID)</argsstring>
        <name>deleteCountry</name>
        <param>
          <type>int</type>
          <declname>countryID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a914bf8701fbed4ff80edcd0d09c7c3fd" kindref="member">psql::deleteCountry</ref> Deletes an existing country from the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>countryID</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique number of the country in question. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on successful removal and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="71" column="1" bodyfile="psql.cpp" bodystart="462" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a26fc592cfb9f484e1bee62af527f2b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::deleteStatus</definition>
        <argsstring>(int statusID)</argsstring>
        <name>deleteStatus</name>
        <param>
          <type>int</type>
          <declname>statusID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a26fc592cfb9f484e1bee62af527f2b95" kindref="member">psql::deleteStatus</ref> Deletes an existing status from the database. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statusID</parametername>
</parameternamelist>
<parameterdescription>
<para>The identification number of the status to be deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on successful removal and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="72" column="1" bodyfile="psql.cpp" bodystart="490" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a117b616053845f1b7295b21a06f008fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::tableApplicationExists</definition>
        <argsstring>()</argsstring>
        <name>tableApplicationExists</name>
        <briefdescription>
<para><ref refid="classpsql_1a117b616053845f1b7295b21a06f008fd" kindref="member">psql::tableApplicationExists</ref> Checks if the table &quot;soknad&quot; exists in the database by attempting to fetch data from it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the table exists in the database and false if it does not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="75" column="1" bodyfile="psql.cpp" bodystart="1643" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ae0ab0012c58471bd3fd63c286fb22224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::tableCountryExists</definition>
        <argsstring>()</argsstring>
        <name>tableCountryExists</name>
        <briefdescription>
<para><ref refid="classpsql_1ae0ab0012c58471bd3fd63c286fb22224" kindref="member">psql::tableCountryExists</ref> Checks if the table &quot;land&quot; exists in the database by attempting to fetch data fram the table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the table exists in the database and false if it does not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="76" column="1" bodyfile="psql.cpp" bodystart="1671" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a3f8bac89bd0cee3af77e47e5c555543d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::tableStatusExists</definition>
        <argsstring>()</argsstring>
        <name>tableStatusExists</name>
        <briefdescription>
<para><ref refid="classpsql_1a3f8bac89bd0cee3af77e47e5c555543d" kindref="member">psql::tableStatusExists</ref> Checks if the table &quot;status&quot; exists in the database py attempting to pull data from the table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the table exists and false if it does not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="77" column="1" bodyfile="psql.cpp" bodystart="1699" bodyend="1721"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a717162b7d7faa0fb41b5a526e42de4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::tableTownExists</definition>
        <argsstring>()</argsstring>
        <name>tableTownExists</name>
        <briefdescription>
<para><ref refid="classpsql_1a717162b7d7faa0fb41b5a526e42de4ac" kindref="member">psql::tableTownExists</ref> Checks if the table &quot;sted&quot; (town) exists by attempting to fetch data from it </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the table exists and false if it does&apos;nt </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="78" column="1" bodyfile="psql.cpp" bodystart="1727" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a4c23d467c41e155a55c38b1cefb9b54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::viewApplicationExists</definition>
        <argsstring>()</argsstring>
        <name>viewApplicationExists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="79" column="1" bodyfile="psql.cpp" bodystart="1751" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aae95eb2a505c1b0b7b4d5671926ecd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::viewTownExists</definition>
        <argsstring>()</argsstring>
        <name>viewTownExists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="80" column="1" bodyfile="psql.cpp" bodystart="1775" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a36f6a197a2214b9c71cfcd620334835d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTableApplication</definition>
        <argsstring>()</argsstring>
        <name>createTableApplication</name>
        <briefdescription>
<para><ref refid="classpsql_1a36f6a197a2214b9c71cfcd620334835d" kindref="member">psql::createTableApplication</ref> Creates the table &quot;soknad&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="83" column="1" bodyfile="psql.cpp" bodystart="1803" bodyend="1826"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ab6e496d8471f3cd9c5c082a6ba75c25b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTableCountry</definition>
        <argsstring>()</argsstring>
        <name>createTableCountry</name>
        <briefdescription>
<para><ref refid="classpsql_1ab6e496d8471f3cd9c5c082a6ba75c25b" kindref="member">psql::createTableCountry</ref> Creates the table &quot;land&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="84" column="1" bodyfile="psql.cpp" bodystart="1832" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a427ad0f483c8ab7a4d23912278bc69e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTableStatus</definition>
        <argsstring>()</argsstring>
        <name>createTableStatus</name>
        <briefdescription>
<para><ref refid="classpsql_1a427ad0f483c8ab7a4d23912278bc69e8" kindref="member">psql::createTableStatus</ref> Creates the table &quot;status&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="85" column="1" bodyfile="psql.cpp" bodystart="1860" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a95d1f522766174bd2c6a7b94f725719c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTableTown</definition>
        <argsstring>()</argsstring>
        <name>createTableTown</name>
        <briefdescription>
<para><ref refid="classpsql_1a95d1f522766174bd2c6a7b94f725719c" kindref="member">psql::createTableTown</ref> Creates the table &quot;sted&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="86" column="1" bodyfile="psql.cpp" bodystart="1888" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ad6fb8e1e7177c7996f297d477ecceb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createViewApplication</definition>
        <argsstring>()</argsstring>
        <name>createViewApplication</name>
        <briefdescription>
<para><ref refid="classpsql_1ad6fb8e1e7177c7996f297d477ecceb27" kindref="member">psql::createViewApplication</ref> Creates the view &quot;view_soknad&quot; This requieres the table &quot;soknad&quot; (application) to be present. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="87" column="1" bodyfile="psql.cpp" bodystart="1916" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ac5b1230ac405a600b67b144060b33a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createViewTowns</definition>
        <argsstring>()</argsstring>
        <name>createViewTowns</name>
        <briefdescription>
<para><ref refid="classpsql_1ac5b1230ac405a600b67b144060b33a0d" kindref="member">psql::createViewTowns</ref> Creates the view_sted. This requires the table &quot;sted&quot; (Town, City, place) to be present in the database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="88" column="1" bodyfile="psql.cpp" bodystart="1943" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ae9e3ee06f4a5ecd4178662dfa0655fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createProcedureNewApplicationID</definition>
        <argsstring>()</argsstring>
        <name>createProcedureNewApplicationID</name>
        <briefdescription>
<para><ref refid="classpsql_1ae9e3ee06f4a5ecd4178662dfa0655fe1" kindref="member">psql::createProcedureNewApplicationID</ref> Creates a stored procedure that returns which is run when a new row is inserted in the application table </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="91" column="1" bodyfile="psql.cpp" bodystart="2105" bodyend="2126"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a28f3e3d6309e3ce57493db284c099946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createProcedureUpdateApplication</definition>
        <argsstring>()</argsstring>
        <name>createProcedureUpdateApplication</name>
        <briefdescription>
<para><ref refid="classpsql_1a28f3e3d6309e3ce57493db284c099946" kindref="member">psql::createProcedureUpdateApplication</ref> Creates a stored procedure that returns which is run when data in the application table is updated </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the creation succeeds and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="92" column="1" bodyfile="psql.cpp" bodystart="2132" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a565bfc828ecb6b5621354128773494fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createProcedureNewCountryID</definition>
        <argsstring>()</argsstring>
        <name>createProcedureNewCountryID</name>
        <briefdescription>
<para><ref refid="classpsql_1a565bfc828ecb6b5621354128773494fd" kindref="member">psql::createProcedureNewCountryID</ref> Creates a stored procedure that returns which is run when a new row is inserted in the country table </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="93" column="1" bodyfile="psql.cpp" bodystart="2297" bodyend="2318"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ade0c7fa4f019c3f349230af09b1de49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createProcedureNewTownID</definition>
        <argsstring>()</argsstring>
        <name>createProcedureNewTownID</name>
        <briefdescription>
<para><ref refid="classpsql_1ade0c7fa4f019c3f349230af09b1de49e" kindref="member">psql::createProcedureNewTownID</ref> Creates a stored procedure that returns which is run when a new row is inserted in the town table </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="94" column="1" bodyfile="psql.cpp" bodystart="2324" bodyend="2345"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a54c75d0896ee6aad58e22c830895c106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createSequenceApplicationIDSeq</definition>
        <argsstring>()</argsstring>
        <name>createSequenceApplicationIDSeq</name>
        <briefdescription>
<para><ref refid="classpsql_1a54c75d0896ee6aad58e22c830895c106" kindref="member">psql::createSequenceApplicationIDSeq</ref> Creates the seqence for incrementing the application ID </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="97" column="1" bodyfile="psql.cpp" bodystart="1970" bodyend="1991"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aa907c84f592212451d3d59a2061adabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createSequenceCountryIDSeq</definition>
        <argsstring>()</argsstring>
        <name>createSequenceCountryIDSeq</name>
        <briefdescription>
<para><ref refid="classpsql_1aa907c84f592212451d3d59a2061adabd" kindref="member">psql::createSequenceCountryIDSeq</ref> Creates the sequence for incrementing the country ID </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="98" column="1" bodyfile="psql.cpp" bodystart="1997" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ae882aa80b2d629383fc2e60aecfd421a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createSequenceStatusIDSeq</definition>
        <argsstring>()</argsstring>
        <name>createSequenceStatusIDSeq</name>
        <briefdescription>
<para><ref refid="classpsql_1ae882aa80b2d629383fc2e60aecfd421a" kindref="member">psql::createSequenceStatusIDSeq</ref> Creates a sequence for increasing the status ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="99" column="1" bodyfile="psql.cpp" bodystart="2024" bodyend="2045"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a6ce21cb5a1e77cb0c280e2932d2b557d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createSequenceTownIDSeq</definition>
        <argsstring>()</argsstring>
        <name>createSequenceTownIDSeq</name>
        <briefdescription>
<para><ref refid="classpsql_1a6ce21cb5a1e77cb0c280e2932d2b557d" kindref="member">psql::createSequenceTownIDSeq</ref> Creates the sequence for incrementing the town ID </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="100" column="1" bodyfile="psql.cpp" bodystart="2051" bodyend="2072"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a5f51e254b67ff932f287df2184ccc043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getError</definition>
        <argsstring>()</argsstring>
        <name>getError</name>
        <briefdescription>
<para><ref refid="classpsql_1a5f51e254b67ff932f287df2184ccc043" kindref="member">psql::getError</ref> If an operation goes wrong, this method can be used to get the returned error message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The error message. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="103" column="1" bodyfile="psql.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a9a0d5ba32aabe6018a36fb0bc185445b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void psql::setError</definition>
        <argsstring>(QString msg)</argsstring>
        <name>setError</name>
        <param>
          <type>QString</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a9a0d5ba32aabe6018a36fb0bc185445b" kindref="member">psql::setError</ref> If an operation goes wrong, this method saves the contents of the error message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The error message to be saved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="104" column="1" bodyfile="psql.cpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a496d0a426a1539bf9babd1dd4e9fcd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countTotalApplications</definition>
        <argsstring>()</argsstring>
        <name>countTotalApplications</name>
        <briefdescription>
<para><ref refid="classpsql_1a496d0a426a1539bf9babd1dd4e9fcd96" kindref="member">psql::countTotalApplications</ref> Counts the total registered applications (registered, sent, interested in interview, declined, etc. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of job applications in the database. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="107" column="1" bodyfile="psql.cpp" bodystart="968" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a8673a80968d293cd3ead6e6e9da8dd8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countRegisteredApplications</definition>
        <argsstring>()</argsstring>
        <name>countRegisteredApplications</name>
        <briefdescription>
<para><ref refid="classpsql_1a8673a80968d293cd3ead6e6e9da8dd8a" kindref="member">psql::countRegisteredApplications</ref> Counts the number of registered job applications that have not yet been sent (status id 1) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of registered job applications. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="108" column="1" bodyfile="psql.cpp" bodystart="998" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1af5e6768f6c51ac7b94571505f7a628e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countSentApplications</definition>
        <argsstring>()</argsstring>
        <name>countSentApplications</name>
        <briefdescription>
<para><ref refid="classpsql_1af5e6768f6c51ac7b94571505f7a628e4" kindref="member">psql::countSentApplications</ref> Counts the number of sent applications (status id 2) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of sent applications. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="109" column="1" bodyfile="psql.cpp" bodystart="1028" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a84c1fdea2d09783a39677c4f79d924fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countInterviews</definition>
        <argsstring>()</argsstring>
        <name>countInterviews</name>
        <briefdescription>
<para><ref refid="classpsql_1a84c1fdea2d09783a39677c4f79d924fc" kindref="member">psql::countInterviews</ref> Counts the number of applications which the emplyer found interesting and called for an interview </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of applications that &quot;led&quot; to an interview. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="110" column="1" bodyfile="psql.cpp" bodystart="1058" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a40541367c3af9c0ac94e2fb92f00f53c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countDeclinedApplications</definition>
        <argsstring>()</argsstring>
        <name>countDeclinedApplications</name>
        <briefdescription>
<para><ref refid="classpsql_1a40541367c3af9c0ac94e2fb92f00f53c" kindref="member">psql::countDeclinedApplications</ref> Counts the number of applications that have been declined/rejected by the employer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of declined/rejected applications </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="111" column="1" bodyfile="psql.cpp" bodystart="1088" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a70ad9f4b00735a55232f46da4edd2edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countWrittenButNotSent</definition>
        <argsstring>()</argsstring>
        <name>countWrittenButNotSent</name>
        <briefdescription>
<para><ref refid="classpsql_1a70ad9f4b00735a55232f46da4edd2edc" kindref="member">psql::countWrittenButNotSent</ref> Counts the number of applications that have been written, but not yet sent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of applications that have been written, but not yet sent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="112" column="1" bodyfile="psql.cpp" bodystart="1144" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a2ae512bc231446d5fccae84582395675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countDeclinedAfterInterview</definition>
        <argsstring>()</argsstring>
        <name>countDeclinedAfterInterview</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="113" column="1" bodyfile="psql.cpp" bodystart="1114" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a0beec2f098edc0961f27774cdd54d09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double psql::countAccepted</definition>
        <argsstring>()</argsstring>
        <name>countAccepted</name>
        <briefdescription>
<para><ref refid="classpsql_1a0beec2f098edc0961f27774cdd54d09b" kindref="member">psql::countAccepted</ref> Counts the number of applications that have been accepted and has lead to an employment. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of accepted applications. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="114" column="1" bodyfile="psql.cpp" bodystart="1174" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1af3462a12dc106e0ca8df4fa8fcf28436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int psql::getCityID</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>getCityID</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1af3462a12dc106e0ca8df4fa8fcf28436" kindref="member">psql::getCityID</ref> Gets the city ID of the application based on the application ID prvoided by the user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The city ID on success and 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="117" column="1" bodyfile="psql.cpp" bodystart="1462" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a0c33b3f48064ba75abaa4b0b58eb1ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int psql::getCityID</definition>
        <argsstring>(string name)</argsstring>
        <name>getCityID</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1af3462a12dc106e0ca8df4fa8fcf28436" kindref="member">psql::getCityID</ref> Gets the ID of a city based on its name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The city name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The city ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="118" column="1" bodyfile="psql.cpp" bodystart="1207" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a81d02dc0350ba11d90257914078ba432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int psql::getCountryID</definition>
        <argsstring>(int cityID)</argsstring>
        <name>getCountryID</name>
        <param>
          <type>int</type>
          <declname>cityID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a81d02dc0350ba11d90257914078ba432" kindref="member">psql::getCountryID</ref> Get the country ID of table sted based on given stedid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cityID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the city in question. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The country ID of the city in question. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="119" column="1" bodyfile="psql.cpp" bodystart="1492" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a9c02c92c09cb60c35d24375673b7df06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int psql::getStatusID</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>getStatusID</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a9c02c92c09cb60c35d24375673b7df06" kindref="member">psql::getStatusID</ref> Returns the status ID of the application based on the application ID provided by the user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID provided by the user. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the application ID on success and 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="120" column="1" bodyfile="psql.cpp" bodystart="1523" bodyend="1546"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a2ad41caea89dc5af0b55b12f6394fbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::fillList</definition>
        <argsstring>(const char *sqlSporring)</argsstring>
        <name>fillList</name>
        <param>
          <type>const char *</type>
          <declname>sqlSporring</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a2ad41caea89dc5af0b55b12f6394fbf5" kindref="member">psql::fillList</ref> &quot;Fills&quot; a QList with integers based on the results of an SQL query. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sqlSporring</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query to be executed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of ints based on the results of the query in &quot;sqlSporring&quot; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="121" column="1" bodyfile="psql.cpp" bodystart="1305" bodyend="1333"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ab6edb8a2e42d8ac7c4ae29f5b0cb494f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; int &gt;</type>
        <definition>QList&lt; int &gt; psql::getSpecificApplicationIDs</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificApplicationIDs</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1ab6edb8a2e42d8ac7c4ae29f5b0cb494f" kindref="member">psql::getSpecificApplicationIDs</ref> Builds a list of application IDs based on search criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of integers containing the application ID(s). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="123" column="1" bodyfile="psql.cpp" bodystart="849" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a029f2ef38c4156cc6c67765900c8245f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getSpecificJobNames</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificJobNames</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a029f2ef38c4156cc6c67765900c8245f" kindref="member">psql::getSpecificJobNames</ref> Builds list of job titles based on search criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of strings containing the job names that matched the search. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="124" column="1" bodyfile="psql.cpp" bodystart="551" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ac2528de5054ba99371d2d796ed32b2b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getSpecificCompanyNames</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificCompanyNames</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1ac2528de5054ba99371d2d796ed32b2b1" kindref="member">psql::getSpecificCompanyNames</ref> Builds a list with name of job company/companies based on search criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of strings containing the job companies that matched the search. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="125" column="1" bodyfile="psql.cpp" bodystart="611" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aace910a1e695138795d6e41765908784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getSpecificCityNames</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificCityNames</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1aace910a1e695138795d6e41765908784" kindref="member">psql::getSpecificCityNames</ref> Builds a list of city names in one or more applications based on search criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of strings containing the city name(s) that matched the search. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="126" column="1" bodyfile="psql.cpp" bodystart="730" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aa04154eae71d7cdfd0fb8ab67ac032e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getSpecificStatuses</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificStatuses</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1aa04154eae71d7cdfd0fb8ab67ac032e7" kindref="member">psql::getSpecificStatuses</ref> Builds a list of statuses based on the search criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of strings containing the status names that matched the search. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="127" column="1" bodyfile="psql.cpp" bodystart="789" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a415ebb495b96ac805880401555f72825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getSpecificDeadlines</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificDeadlines</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a415ebb495b96ac805880401555f72825" kindref="member">psql::getSpecificDeadlines</ref> Builds a list of application deadlines based on search criteria </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of strings containing the application deadlines that matched the search. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="128" column="1" bodyfile="psql.cpp" bodystart="670" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a7c86e4ba33784dece1bf897537087a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getSpecificMotivations</definition>
        <argsstring>(string jobTitle, string companyName, string cityName, string status, string deadline, string motivation)</argsstring>
        <name>getSpecificMotivations</name>
        <param>
          <type>string</type>
          <declname>jobTitle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>companyName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cityName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>status</declname>
        </param>
        <param>
          <type>string</type>
          <declname>deadline</declname>
        </param>
        <param>
          <type>string</type>
          <declname>motivation</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a7c86e4ba33784dece1bf897537087a68" kindref="member">psql::getSpecificMotivations</ref> Builds a list of motivations based on search criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The job title to be included in the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>companyName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the company to be included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cityName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the city where the job is located. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadline</parametername>
</parameternamelist>
<parameterdescription>
<para>The deadline of the application(s) in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>motivation</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional text containing the reasons and motivation why the user applied for this job </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of strings containing the motivations and reasons for applying for those jobs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="129" column="1" bodyfile="psql.cpp" bodystart="910" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a42ee0cf90055ba6a7a6f564cf04d8bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getCityNames</definition>
        <argsstring>()</argsstring>
        <name>getCityNames</name>
        <briefdescription>
<para><ref refid="classpsql_1a42ee0cf90055ba6a7a6f564cf04d8bb8" kindref="member">psql::getCityNames</ref> Builds a list of strings that cointain name of all cities in the database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>On success, return the mentioned list of strings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="130" column="1" bodyfile="psql.cpp" bodystart="1240" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a14854d28aabc7e658aea87a7b8b52e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QString &gt;</type>
        <definition>QList&lt; QString &gt; psql::getStatuses</definition>
        <argsstring>()</argsstring>
        <name>getStatuses</name>
        <briefdescription>
<para><ref refid="classpsql_1a14854d28aabc7e658aea87a7b8b52e5c" kindref="member">psql::getStatuses</ref> Builds a list of all statuses registered in the database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>On success, return the mentioned list of strings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="131" column="1" bodyfile="psql.cpp" bodystart="1272" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a7acc18034ef60c8a1e69b0e1a15d8ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getCityName</definition>
        <argsstring>(int cityNumber)</argsstring>
        <name>getCityName</name>
        <param>
          <type>int</type>
          <declname>cityNumber</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a7acc18034ef60c8a1e69b0e1a15d8ab2" kindref="member">psql::getCityName</ref> Gets the name of the city based on the city number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cityNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of the city to be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The city name on success and &quot;Error&quot; on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="132" column="1" bodyfile="psql.cpp" bodystart="1614" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a09745cd03f09ffb2dacacaab4281915f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getCompany</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>getCompany</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a09745cd03f09ffb2dacacaab4281915f" kindref="member">psql::getCompany</ref> Gets the company name based on the application ID provided by the user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID provided by the user. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the company name on success and &quot;Error&quot; on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="133" column="1" bodyfile="psql.cpp" bodystart="1431" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a5724e9992e6a5c98524ab73b98f4202d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getCountryName</definition>
        <argsstring>(int countryID)</argsstring>
        <name>getCountryName</name>
        <param>
          <type>int</type>
          <declname>countryID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a5724e9992e6a5c98524ab73b98f4202d" kindref="member">psql::getCountryName</ref> Gets the name of a country based on its ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>countryID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the country in question. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, return the name of the country. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="134" column="1" bodyfile="psql.cpp" bodystart="1583" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a561f96bfe7e9d092077712dd6b186af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getDate</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>getDate</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a561f96bfe7e9d092077712dd6b186af8" kindref="member">psql::getDate</ref> Gets the application deadline based on the application ID provided by the user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the application ID on success and 0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="135" column="1" bodyfile="psql.cpp" bodystart="1553" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a5c2a64419a68a258071fd1f9a37c7c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getStatusName</definition>
        <argsstring>(int s)</argsstring>
        <name>getStatusName</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1a5c2a64419a68a258071fd1f9a37c7c09" kindref="member">psql::getStatusName</ref> Returns the current status name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the status ID to be used in an SQL query within the method </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the status name on success and &quot;Error&quot; on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="136" column="1" bodyfile="psql.cpp" bodystart="1340" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ada9e3be3e0866011edf53e30ec510afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getTitle</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>getTitle</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1ada9e3be3e0866011edf53e30ec510afc" kindref="member">psql::getTitle</ref> Returns the application title based on the ID provided by the user </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID to be provided by the user. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the application title on success and &quot;Error&quot; on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="137" column="1" bodyfile="psql.cpp" bodystart="1401" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aca1b2273937491e113089c1547caf49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString psql::getMotivation</definition>
        <argsstring>(int applicationID)</argsstring>
        <name>getMotivation</name>
        <param>
          <type>int</type>
          <declname>applicationID</declname>
        </param>
        <briefdescription>
<para><ref refid="classpsql_1aca1b2273937491e113089c1547caf49b" kindref="member">psql::getMotivation</ref> The the motivation for the job application based on the application ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applicationID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the application in question </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string explaing what motivated the user to apply for this job. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="138" column="1" bodyfile="psql.cpp" bodystart="1370" bodyend="1394"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classpsql_1a03f7d92f218a3df66e9b95a2ccccacf6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createFunctionEmptyText</definition>
        <argsstring>()</argsstring>
        <name>createFunctionEmptyText</name>
        <briefdescription>
<para>psql::createFunctionEmptyText Creates a function that checks if iput is empty </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="146" column="1" bodyfile="psql.cpp" bodystart="2078" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1af2c09c971cc8ec3469ee3958f348841f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTriggerNewApplicationID</definition>
        <argsstring>()</argsstring>
        <name>createTriggerNewApplicationID</name>
        <briefdescription>
<para>psql::createTriggerNewApplicationID Creates the trigger that executes the procedure &quot;nysoknadid();&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="149" column="1" bodyfile="psql.cpp" bodystart="2351" bodyend="2372"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1aa88713d35f36b1967234a31b901e9dba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTriggerUpdateApplication</definition>
        <argsstring>()</argsstring>
        <name>createTriggerUpdateApplication</name>
        <briefdescription>
<para>psql::createTriggerUpdateApplication Creates the trigger that executes the procedure &quot;updatesoknad();&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="150" column="1" bodyfile="psql.cpp" bodystart="2378" bodyend="2399"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1a8b14f7c57d1d3a7fa866e1fd3cc260ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTriggerNewCountryID</definition>
        <argsstring>()</argsstring>
        <name>createTriggerNewCountryID</name>
        <briefdescription>
<para>psql::createTriggerNewCountryID Creates the trigger that executes the procedure &quot;nylandid();&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="151" column="1" bodyfile="psql.cpp" bodystart="2405" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="classpsql_1ae97d11a5958918a479d173cc63bac7f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool psql::createTriggerNewTownID</definition>
        <argsstring>()</argsstring>
        <name>createTriggerNewTownID</name>
        <briefdescription>
<para>psql::createTriggerNewTownID Creates the trigger that executes the procedure &quot;nystedid();&quot; </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success and false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="psql.h" line="152" column="1" bodyfile="psql.cpp" bodystart="2432" bodyend="2453"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The psql class. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="psql.h" line="42" column="1" bodyfile="psql.h" bodystart="41" bodyend="153"/>
    <listofallmembers>
      <member refid="classpsql_1ada485c933df77453629e3821ab19fa4c" prot="public" virt="non-virtual"><scope>psql</scope><name>connectDatabase</name></member>
      <member refid="classpsql_1a84d762f07116e20fd58793b6b0327199" prot="private" virt="non-virtual"><scope>psql</scope><name>connectionString</name></member>
      <member refid="classpsql_1a0beec2f098edc0961f27774cdd54d09b" prot="public" virt="non-virtual"><scope>psql</scope><name>countAccepted</name></member>
      <member refid="classpsql_1a2ae512bc231446d5fccae84582395675" prot="public" virt="non-virtual"><scope>psql</scope><name>countDeclinedAfterInterview</name></member>
      <member refid="classpsql_1a40541367c3af9c0ac94e2fb92f00f53c" prot="public" virt="non-virtual"><scope>psql</scope><name>countDeclinedApplications</name></member>
      <member refid="classpsql_1a84c1fdea2d09783a39677c4f79d924fc" prot="public" virt="non-virtual"><scope>psql</scope><name>countInterviews</name></member>
      <member refid="classpsql_1a8673a80968d293cd3ead6e6e9da8dd8a" prot="public" virt="non-virtual"><scope>psql</scope><name>countRegisteredApplications</name></member>
      <member refid="classpsql_1af5e6768f6c51ac7b94571505f7a628e4" prot="public" virt="non-virtual"><scope>psql</scope><name>countSentApplications</name></member>
      <member refid="classpsql_1a496d0a426a1539bf9babd1dd4e9fcd96" prot="public" virt="non-virtual"><scope>psql</scope><name>countTotalApplications</name></member>
      <member refid="classpsql_1a70ad9f4b00735a55232f46da4edd2edc" prot="public" virt="non-virtual"><scope>psql</scope><name>countWrittenButNotSent</name></member>
      <member refid="classpsql_1a03f7d92f218a3df66e9b95a2ccccacf6" prot="private" virt="non-virtual"><scope>psql</scope><name>createFunctionEmptyText</name></member>
      <member refid="classpsql_1ae9e3ee06f4a5ecd4178662dfa0655fe1" prot="public" virt="non-virtual"><scope>psql</scope><name>createProcedureNewApplicationID</name></member>
      <member refid="classpsql_1a565bfc828ecb6b5621354128773494fd" prot="public" virt="non-virtual"><scope>psql</scope><name>createProcedureNewCountryID</name></member>
      <member refid="classpsql_1ade0c7fa4f019c3f349230af09b1de49e" prot="public" virt="non-virtual"><scope>psql</scope><name>createProcedureNewTownID</name></member>
      <member refid="classpsql_1a28f3e3d6309e3ce57493db284c099946" prot="public" virt="non-virtual"><scope>psql</scope><name>createProcedureUpdateApplication</name></member>
      <member refid="classpsql_1a54c75d0896ee6aad58e22c830895c106" prot="public" virt="non-virtual"><scope>psql</scope><name>createSequenceApplicationIDSeq</name></member>
      <member refid="classpsql_1aa907c84f592212451d3d59a2061adabd" prot="public" virt="non-virtual"><scope>psql</scope><name>createSequenceCountryIDSeq</name></member>
      <member refid="classpsql_1ae882aa80b2d629383fc2e60aecfd421a" prot="public" virt="non-virtual"><scope>psql</scope><name>createSequenceStatusIDSeq</name></member>
      <member refid="classpsql_1a6ce21cb5a1e77cb0c280e2932d2b557d" prot="public" virt="non-virtual"><scope>psql</scope><name>createSequenceTownIDSeq</name></member>
      <member refid="classpsql_1a36f6a197a2214b9c71cfcd620334835d" prot="public" virt="non-virtual"><scope>psql</scope><name>createTableApplication</name></member>
      <member refid="classpsql_1ab6e496d8471f3cd9c5c082a6ba75c25b" prot="public" virt="non-virtual"><scope>psql</scope><name>createTableCountry</name></member>
      <member refid="classpsql_1a427ad0f483c8ab7a4d23912278bc69e8" prot="public" virt="non-virtual"><scope>psql</scope><name>createTableStatus</name></member>
      <member refid="classpsql_1a95d1f522766174bd2c6a7b94f725719c" prot="public" virt="non-virtual"><scope>psql</scope><name>createTableTown</name></member>
      <member refid="classpsql_1af2c09c971cc8ec3469ee3958f348841f" prot="private" virt="non-virtual"><scope>psql</scope><name>createTriggerNewApplicationID</name></member>
      <member refid="classpsql_1a8b14f7c57d1d3a7fa866e1fd3cc260ca" prot="private" virt="non-virtual"><scope>psql</scope><name>createTriggerNewCountryID</name></member>
      <member refid="classpsql_1ae97d11a5958918a479d173cc63bac7f8" prot="private" virt="non-virtual"><scope>psql</scope><name>createTriggerNewTownID</name></member>
      <member refid="classpsql_1aa88713d35f36b1967234a31b901e9dba" prot="private" virt="non-virtual"><scope>psql</scope><name>createTriggerUpdateApplication</name></member>
      <member refid="classpsql_1ad6fb8e1e7177c7996f297d477ecceb27" prot="public" virt="non-virtual"><scope>psql</scope><name>createViewApplication</name></member>
      <member refid="classpsql_1ac5b1230ac405a600b67b144060b33a0d" prot="public" virt="non-virtual"><scope>psql</scope><name>createViewTowns</name></member>
      <member refid="classpsql_1a999ee8e2d813892411ef502ebc055a79" prot="public" virt="non-virtual"><scope>psql</scope><name>deleteApplication</name></member>
      <member refid="classpsql_1aaffd42b26b635d9881daaf5fbf4fd62f" prot="public" virt="non-virtual"><scope>psql</scope><name>deleteCity</name></member>
      <member refid="classpsql_1a914bf8701fbed4ff80edcd0d09c7c3fd" prot="public" virt="non-virtual"><scope>psql</scope><name>deleteCountry</name></member>
      <member refid="classpsql_1a26fc592cfb9f484e1bee62af527f2b95" prot="public" virt="non-virtual"><scope>psql</scope><name>deleteStatus</name></member>
      <member refid="classpsql_1aaa952fad98ba9bd5be5648b6117a65f1" prot="private" virt="non-virtual"><scope>psql</scope><name>errMsg</name></member>
      <member refid="classpsql_1a2ad41caea89dc5af0b55b12f6394fbf5" prot="public" virt="non-virtual"><scope>psql</scope><name>fillList</name></member>
      <member refid="classpsql_1af3462a12dc106e0ca8df4fa8fcf28436" prot="public" virt="non-virtual"><scope>psql</scope><name>getCityID</name></member>
      <member refid="classpsql_1a0c33b3f48064ba75abaa4b0b58eb1ccd" prot="public" virt="non-virtual"><scope>psql</scope><name>getCityID</name></member>
      <member refid="classpsql_1a7acc18034ef60c8a1e69b0e1a15d8ab2" prot="public" virt="non-virtual"><scope>psql</scope><name>getCityName</name></member>
      <member refid="classpsql_1a42ee0cf90055ba6a7a6f564cf04d8bb8" prot="public" virt="non-virtual"><scope>psql</scope><name>getCityNames</name></member>
      <member refid="classpsql_1a09745cd03f09ffb2dacacaab4281915f" prot="public" virt="non-virtual"><scope>psql</scope><name>getCompany</name></member>
      <member refid="classpsql_1a81d02dc0350ba11d90257914078ba432" prot="public" virt="non-virtual"><scope>psql</scope><name>getCountryID</name></member>
      <member refid="classpsql_1a5724e9992e6a5c98524ab73b98f4202d" prot="public" virt="non-virtual"><scope>psql</scope><name>getCountryName</name></member>
      <member refid="classpsql_1a561f96bfe7e9d092077712dd6b186af8" prot="public" virt="non-virtual"><scope>psql</scope><name>getDate</name></member>
      <member refid="classpsql_1a5f51e254b67ff932f287df2184ccc043" prot="public" virt="non-virtual"><scope>psql</scope><name>getError</name></member>
      <member refid="classpsql_1a95d06ee661db0b9cf72605b983b04613" prot="public" virt="non-virtual"><scope>psql</scope><name>getHost</name></member>
      <member refid="classpsql_1aca1b2273937491e113089c1547caf49b" prot="public" virt="non-virtual"><scope>psql</scope><name>getMotivation</name></member>
      <member refid="classpsql_1a817e5a88f877cac6f843c1e743aec096" prot="public" virt="non-virtual"><scope>psql</scope><name>getPassword</name></member>
      <member refid="classpsql_1ab6edb8a2e42d8ac7c4ae29f5b0cb494f" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificApplicationIDs</name></member>
      <member refid="classpsql_1aace910a1e695138795d6e41765908784" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificCityNames</name></member>
      <member refid="classpsql_1ac2528de5054ba99371d2d796ed32b2b1" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificCompanyNames</name></member>
      <member refid="classpsql_1a415ebb495b96ac805880401555f72825" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificDeadlines</name></member>
      <member refid="classpsql_1a029f2ef38c4156cc6c67765900c8245f" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificJobNames</name></member>
      <member refid="classpsql_1a7c86e4ba33784dece1bf897537087a68" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificMotivations</name></member>
      <member refid="classpsql_1aa04154eae71d7cdfd0fb8ab67ac032e7" prot="public" virt="non-virtual"><scope>psql</scope><name>getSpecificStatuses</name></member>
      <member refid="classpsql_1a14854d28aabc7e658aea87a7b8b52e5c" prot="public" virt="non-virtual"><scope>psql</scope><name>getStatuses</name></member>
      <member refid="classpsql_1a9c02c92c09cb60c35d24375673b7df06" prot="public" virt="non-virtual"><scope>psql</scope><name>getStatusID</name></member>
      <member refid="classpsql_1a5c2a64419a68a258071fd1f9a37c7c09" prot="public" virt="non-virtual"><scope>psql</scope><name>getStatusName</name></member>
      <member refid="classpsql_1ada9e3be3e0866011edf53e30ec510afc" prot="public" virt="non-virtual"><scope>psql</scope><name>getTitle</name></member>
      <member refid="classpsql_1aecc9fd93dc5ca0c4f4a63d445a36d166" prot="public" virt="non-virtual"><scope>psql</scope><name>getUsername</name></member>
      <member refid="classpsql_1ab6ba33b32955d9343406b4ac327f673d" prot="private" virt="non-virtual"><scope>psql</scope><name>host</name></member>
      <member refid="classpsql_1a03f773904e698853caa0fcdb1f5b3809" prot="public" virt="non-virtual"><scope>psql</scope><name>insertApplication</name></member>
      <member refid="classpsql_1a767b85014d9df3eac148730f18888d6d" prot="public" virt="non-virtual"><scope>psql</scope><name>insertCity</name></member>
      <member refid="classpsql_1ab3b5934ce3fbc4be1730d990d4142893" prot="public" virt="non-virtual"><scope>psql</scope><name>insertCountry</name></member>
      <member refid="classpsql_1a601ee0bdc9430b1d674a857f7c94b767" prot="public" virt="non-virtual"><scope>psql</scope><name>insertStatus</name></member>
      <member refid="classpsql_1a735c3b7e0782f90495a6a27e080ed293" prot="private" virt="non-virtual"><scope>psql</scope><name>password</name></member>
      <member refid="classpsql_1aaff5fe0931dce097850982e44e6361af" prot="public" virt="non-virtual"><scope>psql</scope><name>psql</name></member>
      <member refid="classpsql_1a9a0d5ba32aabe6018a36fb0bc185445b" prot="public" virt="non-virtual"><scope>psql</scope><name>setError</name></member>
      <member refid="classpsql_1a96b3b9483f1a642c026d4b5cf505eb75" prot="public" virt="non-virtual"><scope>psql</scope><name>setHost</name></member>
      <member refid="classpsql_1a6c29350037550b7e5a5bb8f439c405f3" prot="public" virt="non-virtual"><scope>psql</scope><name>setPassword</name></member>
      <member refid="classpsql_1a1488a9e4909abd172651b7be240342cb" prot="public" virt="non-virtual"><scope>psql</scope><name>setUsername</name></member>
      <member refid="classpsql_1a117b616053845f1b7295b21a06f008fd" prot="public" virt="non-virtual"><scope>psql</scope><name>tableApplicationExists</name></member>
      <member refid="classpsql_1ae0ab0012c58471bd3fd63c286fb22224" prot="public" virt="non-virtual"><scope>psql</scope><name>tableCountryExists</name></member>
      <member refid="classpsql_1a3f8bac89bd0cee3af77e47e5c555543d" prot="public" virt="non-virtual"><scope>psql</scope><name>tableStatusExists</name></member>
      <member refid="classpsql_1a717162b7d7faa0fb41b5a526e42de4ac" prot="public" virt="non-virtual"><scope>psql</scope><name>tableTownExists</name></member>
      <member refid="classpsql_1a836eea3c6deb2d6a3a357193a99d6ee7" prot="public" virt="non-virtual"><scope>psql</scope><name>updateApplication</name></member>
      <member refid="classpsql_1a6adf2ba381783e520c03fe5324dcb010" prot="public" virt="non-virtual"><scope>psql</scope><name>updateCity</name></member>
      <member refid="classpsql_1ae662278c5fb8ff3471ee1442e69482e2" prot="public" virt="non-virtual"><scope>psql</scope><name>updateCountry</name></member>
      <member refid="classpsql_1a620364c99c98e20720908deb045536a0" prot="public" virt="non-virtual"><scope>psql</scope><name>updateStatus</name></member>
      <member refid="classpsql_1a9cfa6f47616cc1162009459477880df9" prot="private" virt="non-virtual"><scope>psql</scope><name>username</name></member>
      <member refid="classpsql_1a4c23d467c41e155a55c38b1cefb9b54b" prot="public" virt="non-virtual"><scope>psql</scope><name>viewApplicationExists</name></member>
      <member refid="classpsql_1aae95eb2a505c1b0b7b4d5671926ecd2f" prot="public" virt="non-virtual"><scope>psql</scope><name>viewTownExists</name></member>
      <member refid="classpsql_1a164c18771a65b0ae842d59e4c440a994" prot="private" virt="non-virtual"><scope>psql</scope><name>winTitle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
